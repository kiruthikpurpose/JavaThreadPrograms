Questions - Threads:

1. Thread Creation
Create a Java program that demonstrates thread creation by extending the Thread' class. Implement a thread that prints numbers from 1 to 5 with a delay of 500 milliseconds between each number.
Example:
Sample Input: 1
No input required. The program creates a thread and prints numbers from 1 to 5.
Sample Output: 1
Thread running...
1
2
3
4
5
Hint: Use the sleep() method of the Thread class to introduce a delay between printing numbers.
Constraints:
The program should use thread creation by extending the 'Thread class., The thread should print numbers from 1 to 5., There should be a delay of 500 milliseconds between printing each number.
Input Format:
No input required.
Output Format:
Print each number on a new line with a delay of 500 milliseconds.


2. Runnable Interface
Create a Java program that demonstrates thread creation by implementing the Runnable interface. Implement two threads using the Runnable interface that prints numbers alternatively from 1 to 10. Ensure synchronization to alternate between the two threads.
Example:
Sample Input: 1
No custom input required. The program should print numbers from 1 to 10 alternatively using two threads.
Sample Output: 1
Thread A: 1
Thread B: 2
Thread A: 3
Thread B: 4
Thread A: 5
Thread B: 6
Thread A: 7
Thread B: 8
Thread A: 9
Thread B: 10
Hint: Use the synchronized keyword and wait() and notify() methods to achieve synchronization between the two threads.
Constraints:
The program should use the Runnable interface to create threads., The program should print numbers from 1 to 10 alternatively using two threads., Ensure synchronization to alternate between the two threads.
Input Format:
No input required.
Output Format:
Print alternating numbers with thread identifiers.

3. Thread Joining:
Create a Java program that demonstrates thread joining. Implement a main thread that spawns two threads: Thread A and Thread B. Thread A prints numbers from 1 to 5, and Thread B prints letters from 'A' to 'E'. Ensure Thread B starts only after Thread A has finished.
Example:
Sample Input: 1
No input required. Main thread starts execution.
Sample Output: 1
Thread A: 1
Thread A: 2
Thread A: 3
Thread A: 4
Thread A: 5
Thread B: A
Thread B: B
Thread B: C
Thread B: D
Thread B: E
Hint: Use the 'join() method of the "Thread class to wait for a thread to finish execution before proceeding.
Constraints:
The program should use thread joining to ensure that Thread B starts only after Thread A has finished., The program should print the numbers and letters in the specified order.
Input Format:
No input required.
Output Format:
Print numbers from Thread A and letters from Thread B in order.

4. Producer-Consumer Problem
Design a multi-threaded Java program that simulates the Producer-Consumer problem. Implement a bounded buffer with a fixed size of 5 items. Create two threads: a Producer thread that generates numbers from 1 to 10 and adds them to the buffer, and a Consumer thread that reads and removes numbers from the buffer. Ensure proper synchronization mechanisms to prevent race conditions and buffer overflow or underflow scenarios.
Example:
Sample Input: 1
No input required. None (Simulation)
Sample Output: 1
Producer produced: 1
Consumer consumed: 1
Producer produced: 2
Producer produced: 3
Consumer consumed: 2
Producer produced: 4
Consumer consumed: 3
Producer produced: 5
Producer produced: 6
Consumer consumed: 4
Producer produced: 7
Producer produced: 8
Consumer consumed: 5
Producer produced: 9
Producer produced: 10
Consumer consumed: 6
Consumer consumed: 7
Consumer consumed: 8
Consumer consumed: 9
Consumer consumed: 10
Hint: Use synchronized blocks or locks to control access to the shared buffer.
Constraints:
The buffer should have a fixed capacity of 5 items., The Producer thread should produce numbers from 1 to 10 in sequence., The Consumer thread should consume numbers from the buffer in the same order as they were produced., Ensure proper synchronization to prevent race conditions and buffer overflow or underflow.
Input Format:
No input required.
Output Format:
Print messages indicating produced and consumed items.

5. Thread Pool
Design and implement a custom thread pool in Java from scratch. Your thread pool should have the following features: 1. A fixed number of worker threads. 2. A queue to hold tasks that have been submitted but not yet executed. 3. A mechanism to start and stop the thread pool. 4. A way to submit tasks to the thread pool. Your thread pool should also handle the following scenarios: 1. If all worker threads are busy when a new task is submitted, the task should be added to the queue and executed as soon as a worker thread becomes available. 2. If the thread pool is shut down while there are still tasks in the queue, the tasks should be executed before the thread pool terminates.
Example:
Sample Input 1:
No input required
Sample Output 1:
Thread 2: 1
Thread 1: 1
Thread 3: 1
Thread 1: 2
Thread 2: 2
Thread 3: 2
Thread 1: 3
Thread 2: 3
Thread 3: 3
Thread 2: 4
Thread 3: 4
Thread 1: 4
Thread 2: 5
Thread 3: 5
Thread 1: 5
Hint: Use a BlockingQueue to store tasks that have been submitted but not yet executed. Create a WorkerThread class that extends Thread and implements the logic for executing tasks. Each WorkerThread should take tasks from the queue and execute them until the thread pool is shut down.
Constraints:
The thread pool should have a fixed number of worker threads. The thread pool should handle tasks that have been submitted but not yet executed. The thread pool should handle the case where all worker threads are busy when a new task is submitted. The thread pool should handle the case where the thread pool is shut down while there are still tasks in the queue.
Input Format:
No input required.
Output Format:
Print numbers from each thread in the thread pool concurrently.